import React, {useContext, useEffect, useState} from 'react';
import Head from "next/head";

import TextInput from "../../components/inputs/textInput";
import Dropdown from "../../components/common/dropdown/dropdown";
import ToggleCheckbox from "../../components/inputs/toggleCheckbox";
import WhiteButton from "../../components/buttons/whiteButton";
import PrimaryButton from "../../components/buttons/primaryButton";
import * as yup from "yup";
import {useFormik} from "formik";
import {useMutation} from "react-query";
import {loginUser} from "../../API/user.api";
import {createPost, Post} from "../../API/post.api";
import {AxiosContext} from "../../contexts/axiosContext";
import {AxiosContextType} from "../../@types/axiosInstance";
import {now} from "lodash";
import moment from "moment";

function Create(props: {}) {

    const [errorMsg, setErrorMsg] = useState(false);

    const titleTypes = [
        {key: "School/College", value: "School/College"},
        {key: "Security", value: "Security"},
        {key: "IT", value: "IT"},
        {key: "Banking", value: "Banking"},
        {key: "Receptionist", value: "Receptionist"},
    ]

    const positionTypes = [
        {key: "Teacher", value: "Teacher"},
        {key: "Driver", value: "Driver"},
        {key: "Developer", value: "Developer"},
        {key: "Backend", value: "Backend"}
    ]

    const validationSchema = yup.object({
        title: yup
            .string()
            .required('Job Title is required'),
        post: yup
            .string()
            .required('Position is required'),
        location: yup
            .string()
            .required('Location is required'),
        author: yup
            .number()
            .required('Author is required'),
        description: yup
            .string()
            .min(8, 'Description should be of minimum 8 characters length')
            .required('Description is required'),
        time_low: yup
            .string(),
        time_high: yup
            .string(),
        salary_low: yup
            .string(),
        salary_high: yup
            .string(),
        lodging: yup
            .boolean()
    });


    const formik = useFormik({
        initialValues: {
            title: '',
            post: '',
            location: '',
            time_low: '',
            time_high: '',
            salary_low: '20000',
            salary_high: '100000',
            description: '',
            lodging: false,
            author: 1,
        },
        validationSchema: validationSchema,
        onSubmit: (values: any) => {
            initiateCreatePost()
        },
    })
    const {axiosInstance} = useContext(AxiosContext) as AxiosContextType;
    const { isLoading: isCreatingPost, mutate: initiateCreatePost } = useMutation<any, Error>(
        async () => {
            if (axiosInstance == null) return false

            const post: Post = {...formik.values ,time_high: 1, time_low: 2, published_date: new Date().toISOString()}

            return await createPost(axiosInstance, post).then(response => {

                if (response.status == 200){
                    // TODO: Success
                    console.log(response.data)
                    formik.resetForm()
                }else if (response.status == 400) {
                    formik.setErrors(response.data)
                }else if (response.status == 401) {
                    if (response.data.detail != null) {
                        setErrorMsg(response.data.detail)
                    }
                }
            })
        }
    );

    return (
        <div>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app"/>
            </Head>

            <main>
                <h2 className="max-w-[800px] mx-auto px-4 font-medium text-xl mt-6 text-gray-700">Hire Staff</h2>

                <div className="max-w-[700px] mx-auto bg-white rounded p-6 mt-3">
                    <form method={"POST"} onSubmit={(e) => { e.preventDefault(); formik.submitForm()}}>
                        <div className="grid md:grid-cols-2 sm:grid-cols-1 gap-x-8 gap-y-4">
                            <input name={"author"} hidden aria-hidden/>
                            <Dropdown name={"title"}
                                      options={titleTypes}

                                      onSelect={(v)=> !formik.setFieldValue("title", v, true)}
                                      error={formik.touched.title && Boolean(formik.errors.title)}
                                      errorMsg={formik.touched.title && formik.errors.title}

                                      label="Job Title"
                                      separateLabel={true}
                                      required={true}/>

                            <Dropdown name={"post"}
                                      options={positionTypes}


                                      onSelect={(v)=> !formik.setFieldValue("post", v, true)}
                                      error={formik.touched.post && Boolean(formik.errors.post)}
                                      errorMsg={formik.touched.post && formik.errors.post}

                                      label="Position"
                                      separateLabel={true}
                                      required={true}/>

                            <TextInput name="location"
                                       placeholder="Kathmandu"
                                       type="text"

                                       value={formik.values.location}
                                       onChange={formik.handleChange}
                                       error={formik.touched.location && Boolean(formik.errors.location)}
                                       errorMsg={formik.touched.location && formik.errors.location}

                                       label={"Location"}
                                       required={true}
                            />
                            <TextInput name="description"
                                       placeholder={"We are looking for..."}
                                       type="text"

                                       value={formik.values.description}
                                       onChange={formik.handleChange}
                                       error={formik.touched.description && Boolean(formik.errors.description)}
                                       errorMsg={formik.touched.description && formik.errors.description}

                                       label={"Description"}
                                       required={true}/>

                            <div className={"flex items-end gap-3"}>

                                <TextInput name="salary_low"
                                           type="number"
                                           leftLabel={"Rs."}

                                           value={formik.values.salary_low}
                                           onChange={formik.handleChange}
                                           error={formik.touched.salary_low && Boolean(formik.errors.salary_low)}
                                           errorMsg={formik.touched.salary_low && formik.errors.salary_low}

                                           label={"Salary Range"}/>

                                <span className={"font-medium text-gray-600 my-2"}>To</span>

                                <TextInput name="salary_high"
                                           type="number"

                                           value={formik.values.salary_high}
                                           onChange={formik.handleChange}
                                           error={formik.touched.salary_high && Boolean(formik.errors.salary_high)}
                                           errorMsg={formik.touched.salary_high && formik.errors.salary_high}
                                />
                            </div>

                            <div className={"flex items-end gap-3"}>
                                <TextInput name="time_low"
                                           type="time"

                                           // value={formik.values.time_low}
                                           onChange={formik.handleChange}
                                           error={formik.touched.time_low && Boolean(formik.errors.time_low)}
                                           errorMsg={formik.touched.time_low && formik.errors.time_low}

                                           label={"Time Range"}
                                           iClass={"px-2"}
                                />
                                <span className={"font-medium text-gray-600 my-2"}>To</span>
                                <TextInput name="time_high"
                                           type="time"

                                           // value={formik.values.time_high}
                                           onChange={formik.handleChange}
                                           error={formik.touched.time_high && Boolean(formik.errors.time_high)}
                                           errorMsg={formik.touched.time_high && formik.errors.time_high}

                                           iClass={"px-2"}
                                />
                            </div>


                            <ToggleCheckbox name={"lodging"} defaultChecked={true} label={"Lodging"} />
                        </div>
                        <div
                            className="flex flex-col-reverse items-center justify-end w-full mt-6 gap-4 md:flex-row">
                            <WhiteButton name={"Cancel"} class="font-medium text-base" />
                            <PrimaryButton name={"Add Post"}
                                           disabled={isCreatingPost}
                                           onClick={formik.submitForm}
                                           class="font-medium text-base"/>
                        </div>
                    </form>
                </div>
            </main>

        </div>
    );
}

export default Create;